data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
View(data)
names(data)
class(data[0])
class(data[0])
data[0]
data[0,]
data[1,]
colnames(data) <- c(1,2,3,4,5,6,7,8,9,10,11)
data[0,]
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
data[0,]
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
for ( x in 1:splitRate) {
trainingSet = c()
}
length(names)
length(data)
size(data)
dim(data)
dim(data[0])
dim(data[0,])
dim(data[1,])
dim(data[,1])
dim(data[,0])
dim(data[1])
dim(data[2])
dim(data[10])
dim(data)
dim(data)
dim(data[1])
dim(data[0])
nrow(data)
dataInEachPart = nrow(data) / splitRate
dataInEachPart
round(dataInEachPart,0)
as.integer(dataInEachPart)
dataInEachPart = as.integer(nrow(data) / splitRate)
dataInEachPart
dataInEachPart* 4
library(class)
print "1"
1
testSet = x*dataInEachPart:(x+1)*dataInEachPart)
testSet = x*dataInEachPart:((x+1)*dataInEachPart)
testSet
library(class)
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
for ( x in 0:splitRate-1) {
testSet = x*dataInEachPart:((x+1)*dataInEachPart)
testSet
}
print(testSet)
print ( x*dataInEachPart)
testSet = x*dataInEachPart:((x+1)*(dataInEachPart -1))
>range
?range
library(class)
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
for ( x in 0:splitRate-1) {
print ( x*dataInEachPart)
#   testSet = x*dataInEachPart:((x+1)*(dataInEachPart -1))
print(testSet)
}
dataInEachPart
testSet = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
x = 1
testSet = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
print(testSet)
trainingSet = data[-c(testSet)]
trainingSet = data[-c(testSet)]
trainingSet
trainingSet[0]
c(testSet)
nrow(data)
nrow(data[-c(testSet)])
nrow(data[-c(testSet)],)
nrow(data[-c(testSet),])
trainingSet = data[-c(testSet),]
print(testSet)
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
testSet = data[c(testSet),]
trainingSet = data[-c(testSet),]
testSet = data[c(testSetIndexes),]
trainingSet = data[-c(testSetIndexes),]
nrow(trainingSet)
nrow(testSet)
nrow(testSet) + nrow ( trainingSet)
?knn
ncol(testSet)
testSet = data[c(testSetIndexes),1:10]
ncol(testSet)
names(testSet)
help(factor)
clasifier = factor(c(trainingSet[,11]))
clasifier
knn(trainingSet, testSet, clasifier  )
dim(testSet)
dim( trainingSet)
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
knn(trainingSet, testSet, clasifier  )
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
train
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
test
rep("s",25)
c(rep("s",25), rep("c",25), rep("v",25))
factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(trainingSet, testSet, clasifier, k = 3, prob=TRUE)
knn(train, test, cl, k = 3, prob=TRUE)
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(train, test, cl, k = 3, prob=TRUE)
trainingSet
testSet
clasifier
knn(trainingSet, testSet, clasifier, k = 3, prob=TRUE)
knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 3, prob=TRUE)
traceback
traceback()
clasifier
knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 3, prob=TRUE)
?apply
knn(train, test, cl, k = 3, prob=TRUE)
attributes(.Last.value)
complete.cases(final)
complete.cases(data)
data[rowSums(is.na(data[,]))==0,]
2 %in% c(1,2,3,4)
8 %in% c(1,2,3,4)
data[!apply(data,1,function(x)any(? %in% c(x))),]
data[!apply(data,1,function(x)any('?' %in% c(x))),]
dim(data)
dim(data[!apply(data,1,function(x)any('?' %in% c(x))),])
data <- data[!apply(data,1,function(x)any('?' %in% c(x))),]
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
for ( x in 0:splitRate-1) {
#   print ( x*dataInEachPart)
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 3, prob=TRUE)
library(class)
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
data <- data[!apply(data,1,function(x)any('?' %in% c(x))),]
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
for ( x in 0:splitRate-1) {
#   print ( x*dataInEachPart)
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 3, prob=TRUE)
}
# train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
# test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
# cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
# knn(train, test, cl, k = 3, prob=TRUE)
# attributes(.Last.value)
# cut data examples not having all the information
data[!apply(data,1,function(x)any('?' %in% c(x))),]
data.knn <- knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 3, prob=TRUE)
data.knn
data.knn
data.knn
}
for ( x in 0:splitRate-1) {
#   print ( x*dataInEachPart)
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
data.knn <- knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 3, prob=TRUE)
}
data.knn <- knn(na.omit(trainingSet), na.omit(testSet), clasifier, k = 1, prob=TRUE)
data.knn <- knn(trainingSet, testSet, clasifier, k = 1, prob=TRUE)
x = 0
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
trainingSet = trainingSet[,1:10]
data.knn <- knn(trainingSet, testSet, clasifier, k = 1, prob=TRUE)
knn(trainingSet, testSet, clasifier, k = 1, prob=TRUE)
data.knn <- knn(trainingSet, testSet, clasifier, k = 0, prob=TRUE)
data.knn <- knn(trainingSet, testSet, clasifier, k = 1)
trainingSet
testSetIndexes
dataInEachPart
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
testSetIndexes
x
x+1
c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
dataInEachPart
(x+1)*(dataInEachPart -1))
(x+1)*(dataInEachPart -1)
x*dataInEachPart:((x+1)*(dataInEachPart -1))
(x+1)*(dataInEachPart -1)
x*dataInEachPart:((x+1)*(dataInEachPart -1))
library(class)
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
data <- data[!apply(data,1,function(x)any('?' %in% c(x))),]
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
for ( x in 0:splitRate-1) {
#   print ( x*dataInEachPart)
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
x = 0
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
data.knn <- knn(trainingSet, testSet, clasifier, k = 1, prob=TRUE)
}
data.knn
# train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
# test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
# cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
# knn(train, test, cl, k = 3, prob=TRUE)
# attributes(.Last.value)
# cut data examples not having all the information
data[!apply(data,1,function(x)any('?' %in% c(x))),]
trainingSet
library(class)
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
data <- data[!apply(data,1,function(x)any('?' %in% c(x))),]
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
# for ( x in 0:splitRate-1) {
#   print ( x*dataInEachPart)
x = 0
testSetIndexes = c(x*dataInEachPart:((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
data.knn <- knn(trainingSet, testSet, clasifier, k = 1, prob=TRUE)
# }
data.knn
# train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
# test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
# cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
# knn(train, test, cl, k = 3, prob=TRUE)
# attributes(.Last.value)
# cut data examples not having all the information
data[!apply(data,1,function(x)any('?' %in% c(x))),]
trainingSet
dataInEachPart
((x+1)*(dataInEachPart -1))
x*dataInEachPart:((x+1)*(dataInEachPart -1))
c((x*dataInEachPart):((x+1)*(dataInEachPart -1)))
testSetIndexes = c((x*dataInEachPart):((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),1:10]
data.knn <- knn(trainingSet, testSet, clasifier, k = 1, prob=TRUE)
data.knn
clasifier
testSet
testSet = data[c(testSetIndexes),]
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
testSet
testSet[,11]-data.knn
data.knn
colnames(data.knn)
?knn
attributes(.Last.value)
knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
attributes(.Last.value)
data.knn
data.knn$prob
data.knn[0]
data.knn[1]
data.knn[3]
data.knn
class(data.knn)
names(data.knn)
names(data.knn)
summary(data.knn)
clasifier = ordered(c(trainingSet[,11]))
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),]
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
testSet[,11]-data.knn
clasifier = factor(c(trainingSet[,11]))
trainingSet
trainingSet[,1:10]
trainingSet = trainingSet[,1:10]
trainingSet = trainingSet[,1:10]
clasifier = factor(c(trainingSet[,11]))
trainingSet = data[-c(testSetIndexes),]
c(trainingSet[,11])
factor(c(trainingSet[,11]))
clasifier = factor(c(trainingSet[,11]))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),]
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
attributes(.Last.value)
data.knn[,]
data.knn[1:10]
dim(data.knn)
data.knn[1:dataInEachPart]
data.knn[1:dataInEachPart-1]
data.knn[1:(dataInEachPart-1)]
data.knn[1:(dataInEachPart-1)][0]
data.knn[1:(dataInEachPart-1)]
data.knn[1:(dataInEachPart-1)] - testSet[,11]
testSet[,11]
as.character(data.knn)
testSet[,11]-as.integer(data.knn)
testSet[,11]
as.integer(data.knn)
data.knn
as.integer(data.knn)
library(class)
data <- read.csv(file="breast-cancer-wisconsin.data",head=FALSE,sep=",")
data <- data[!apply(data,1,function(x)any('?' %in% c(x))),]
names(data)
colnames(data) <- c("id","clump thickness","cell size","cell shape","marginal adhesion","Single Epithelial Cell Size","Bare Nuclei","Bland Chromatin","Normal Nucleoli","Mitoses","class")
splitRate = 4
dataInEachPart = as.integer(nrow(data) / splitRate)
# for ( x in 0:splitRate-1) {
#   print ( x*dataInEachPart)
x = 0
testSetIndexes = c((x*dataInEachPart):((x+1)*(dataInEachPart -1)))
trainingSet = data[-c(testSetIndexes),]
clasifier = factor(c(trainingSet[,11]))
trainingSet = trainingSet[,1:10]
testSet = data[c(testSetIndexes),]
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
testSet[,11]-as.integer(data.knn)
data.knn$pro
# }
data.knn[1:(dataInEachPart-1)]
# train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
# test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
# cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
# knn(train, test, cl, k = 3, prob=TRUE)
attributes(.Last.value)
# cut data examples not having all the information
data[!apply(data,1,function(x)any('?' %in% c(x))),]
trainingSet
testSet[,11]-as.integer(data.knn)
data.knn$pro
testSet[,11]-as.integer(data.knn)
data.knn
clasifier
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
data.knn[1:(dataInEachPart-1)]
testSet[,11]-as.integer(data.knn[1:(dataInEachPart-1)])
data.knn[1:(dataInEachPart-1)]
as.integer(data.knn[1:(dataInEachPart-1)])
(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn
data.knn
(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn$pro
apply(data.knn,1,function(x)any(x != 0))
sapply
?sapply
as.integer(data.knn[1:(dataInEachPart-1)])*2
data.knn.diff = testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
subset(data.knn.diff, function(x)any(x != 0))
subset(data.knn.diff, x != 0)
data.knn.diff != 0
summary(data.knn.diff == 0)
summary(data.knn.diff == 0)[TRUE]
summary(data.knn.diff == 0)['TRUE']
summary(data.knn.diff)['TRUE']
summary(data.knn.diff == 0)['TRUE']
match(0, data.knn.diff)
match(0, data.knn.diff)
data.knn.diff
match(0, c(data.knn.diff))
?which
which(data.knn.diff == 0)
dim(which(data.knn.diff == 0))
c(which(data.knn.diff == 0)
)
c(which(data.knn.diff == 0))
dim(c(which(data.knn.diff == 0)))
length(which(data.knn.diff == 0))
= length(which(data.knn.diff == 0))
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.ok
data.knn.diff.bad = length(which(data.knn.diff != 0))
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 2, prob=TRUE)
data.knn
data.knn.diff = testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.bad = length(which(data.knn.diff != 0))
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 3, prob=TRUE)
data.knn
data.knn.diff = testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.bad = length(which(data.knn.diff != 0))
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 4, prob=TRUE)
data.knn
data.knn.diff = testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.bad = length(which(data.knn.diff != 0))
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 10, prob=TRUE)
data.knn
data.knn.diff = testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.bad = length(which(data.knn.diff != 0))
data.knn <- knn(trainingSet, testSet[,1:10], clasifier, k = 1, prob=TRUE)
data.knn
data.knn.diff = testSet[,11]-(as.integer(data.knn[1:(dataInEachPart-1)])*2)
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.bad = length(which(data.knn.diff != 0))
data[data == 0]
data.knn.diff[data.knn.diff == 0]
length(data.knn.diff[data.knn.diff == 0])
data.knn.diff.ok = length(which(data.knn.diff == 0))
data.knn.diff.ok = length(data.knn.diff[data.knn.diff == 0])
data.knn.diff.bad = length(which(data.knn.diff != 0))
